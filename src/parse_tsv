#! /usr/bin/perl

use JSON;
$json = JSON->new->allow_nonref;

open(FH, '<', "randomizer_groups_overrides.csv") or die $!;
open(LOOK, '<', "randomizer_normal_look.csv") or die $!;
open(LOCATION_MAPPING, '>', "location_mapping.lua") or die $!;

# Key Items
my @key_items = ( "mushroom_2", "mushroom_3", "postal_badge", "abilities_slug_vacuum", "abilities_partyhorn", "abilities_dive", "toolbox", "sootling_leash", "abilities_mailbag", "guano", "bucket_empty", "seed_pod", "spring_key", "skins_skin_1", "skins_skin_2", "skins_skin_5", "skins_skin_3", "skins_skin_4", "idol1", "nugget_4", "idol2", "idol3", "idol4", "spores_1", "spores_2", "spores_3", "spores_4", "spores_5", "tadpole_8", "wallet_2", "wallet_4", "bluekey", "greenkey", "nim_key", "tracker_springs", "tracker_caves", "tracker_peak", "tracker_scarabs", "treasure_map", "abilities_speed", "traitor_spirit_4", "powerups_skvader_1", "powerups_skvader_2", "abilities_dive_speed", "abilities_slug_upgrade");

my @locations = ();
my %groups = {};

# Load location map from JSON
# "location name" : "id"
use FindBin;
use lib "$FindBin::RealBin/lib/perl5";
my $binpath = $FindBin::RealBin;
my $location_id_map = decode_json do {
    my $filename = "$binpath/location_ids.json";
    open(my $json_fh, "<", $filename)
        or die("Can't open \"$filename\": $!\n");
    local $/;
    <$json_fh>
};

# Discard headers
<>;
<FH>;
<LOOK>;

print LOCATION_MAPPING <<"END";
-- use this file to map the AP location ids to your locations
-- to reference a location in Pop use @ in the beginning and then path to the section (more info: https://github.com/black-sliver/PopTracker/blob/master/doc/PACKS.md#locations)
-- to reference an item use it's code
-- here are the SM locations as an example: https://github.com/Cyb3RGER/sm_ap_tracker/blob/main/scripts/autotracking/location_mapping.lua
LOCATION_MAPPING = {
END

while (<>) {
    s/\R\z//; # cross-platform chomp
    my ($name, $item, $spawn_id, $tracker, $spawn, @conditions) = split /\t/;
    my ($pos_x, $pos_y) = split /,/, $tracker;

    # Read xy coords and condition overrides from secondary file
    my $line = <FH>;
    $line =~ s/\R\z//;
    my ($linenum,$cname,$coords,$group,@override_conditions) = split /\t/, $line;
    my ($x, $y) = split /,/, $coords;

    $name eq $cname or die "Line mismatch: $name !eq $cname\n";

    # Read checkable rules from secondary file
    my $line = <LOOK>;
    $line =~ s/\R\z//;
    my ($l_linenum,$lname,@look_conditions) = split /\t/, $line;

    $name eq $lname or die "Line mismatch: $name !eq $cname\n";

    # mushroom_2 usually has the full count of access rules
    # this might not be necessary with the check for pre-Fosfor rules
    my @access_rules;
    foreach my $a (split /,/, $conditions[0]) {
        push @access_rules, [];
    }

    # Parse conditions and generate access_rules
    # Skip the last 4 key items, those are a bugfix
    for ($i=0; $i<@conditions and $i<(@key_items - 4); $i++) {
        my @is_required = split /,/, $conditions[$i];
        for ($j=0; $j<(@access_rules?@access_rules:@is_required); $j++) {
            if (1 == scalar @is_required or $is_required[$j]) {
                if ("X" eq $override_conditions[$i]) {
                    push @{$access_rules[$j]}, "[" . $key_items[$i] . "]";
                } else {
                    push @{$access_rules[$j]}, $key_items[$i];
                }
            }
        }
    }

    # For each rule containing a Tracker (Normal Mode)
    # Generate a matching rule ignoring it (Hard Mode)
    #   a matching rule making it optional (Normal OOL)
    foreach my $rule (@access_rules) {
        if (grep (/^tracker_/, @{$rule})) {
            #warn "Found tracker rule: " . join (",", @{$rule});
            #warn "Adding rule: " . join (",", ("mode_hard", map (/^tracker_/ ? () : $_, @{$rule}) ));
            push @access_rules, [ "mode_hard", map (/^tracker_/ ? () : $_, @{$rule}) ];
            #warn "Adding rule: " . join (",", ( "ool_tracker", map (/^tracker_/ ? "[$_]" : $_, @{$rule}) ));
            push @access_rules, [ "ool_tracker", map (/^tracker_/ ? "\[$_\]" : $_, @{$rule}) ];
        }
    }

    # for things that can be seen
    my @look_rules;
    foreach my $a (split /,/, $look_conditions[0]) {
        push @look_rules, [];
    }

    # Parse look_conditions and generate look_rules
    # Skip the last 4 key items, those are a bugfix
    for ($i=0; $i<@look_conditions and $i<(@key_items - 4); $i++) {
        my @is_required = split /,/, $look_conditions[$i];
        for ($j=0; $j<(@look_rules?@look_rules:@is_required); $j++) {
            if (1 == scalar @is_required or $is_required[$j]) {
                if ("-" eq $is_required[$j]) {
                    push @{$look_rules[$j]}, "";
                } else {
                    push @{$look_rules[$j]}, $key_items[$i];
                }
            }
        }
    }

    my @flattened_access_rules;
    foreach my $rule (@access_rules) {
        push @flattened_access_rules, join (",", @{$rule});
    }

    foreach my $rule (@look_rules) {
        push @flattened_access_rules, "{" . join (",", @{$rule}) . "}";
    }

    if ($group and defined (my $group_index = $groups{$group})) {
        my %section = ("name" => $name, "item_count" => 1,
            "access_rules" => \@flattened_access_rules);
        # Move group location to average of sublocations
        my $section_count = scalar @{$locations[$group_index]{"sections"}};
        print STDERR "Updating location of $group [$section_count] from (" . $locations[$group_index]{"map_locations"}[0]{"x"} . "," . $locations[$group_index]{"map_locations"}[0]{"y"} . ")...";
        $locations[$group_index]{"map_locations"}[0]{"x"} = int((int($locations[$group_index]{"map_locations"}[0]{"x"} * $section_count) + int($x)) / (1 + $section_count));
        $locations[$group_index]{"map_locations"}[0]{"y"} = int((int($locations[$group_index]{"map_locations"}[0]{"y"} * $section_count) + int($y)) / (1 + $section_count));
        print STDERR "...to (" . $locations[$group_index]{"map_locations"}[0]{"x"} . "," . $locations[$group_index]{"map_locations"}[0]{"y"} . ")...\n";
        push @{$locations[$group_index]{"sections"}}, \%section;
    } elsif ($group) {
        my %location = ("name" => $group,
            "map_locations" => [{ "map" => "overworld", "x" => int($x), "y" => int($y) }],
            "sections" => [{ "name" => $name, "item_count" => 1 , "access_rules" => \@flattened_access_rules}]);
        $groups{$group} = scalar @locations;
        push @locations, \%location;
    } else {
        my %location = ("name" => $name,
            "map_locations" => [{ "map" => "overworld", "x" => int($x), "y" => int($y) }],
            "sections" => [{ "name" => $name, "item_count" => 1 }],
            "access_rules" => \@flattened_access_rules);

        push @locations, \%location;
    }

    # For pulling into location_mapping
    print LOCATION_MAPPING "    [$$location_id_map{$name}] = {\"\@" . ($group ? $group : $name) . "/$name\"},\n";

}

print LOCATION_MAPPING "}\n";

print $json->pretty->encode( \@locations );

